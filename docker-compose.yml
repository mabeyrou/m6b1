version: '3.9'

services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
    ports:
      - "${API_PORT}:${API_PORT}"
    env_file:
      - .env 
    environment:
      - APP_ENV=${APP_ENV:-local}
    volumes:
      - ./api:/app
      - ./models:/app/models 
    networks:
      - app-network
      - monitoring

  streamlit:
    # image: marou974/m0b5-front:${APP_VERSION}   # to test remote images
    build:
      context: ./streamlit
      dockerfile: Dockerfile
    container_name: streamlit
    ports:
      - "${STREAMLIT_PORT}:${STREAMLIT_PORT}"
    env_file:
      - .env 
    depends_on:
      - api
    environment:
      - API_URL=${API_URL:-http://api:8000}
    volumes:
      - ./streamlit:/app
    networks:
      - app-network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    ports:
      - "${NODE_EXPORTER_PORT}:${NODE_EXPORTER_PORT}"
    env_file:
      - .env 
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    env_file:
      - .env 
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
    depends_on:
      - api
      - node-exporter
    restart: unless-stopped
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    env_file:
      - .env 
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: "grafana-piechart-panel"
    volumes:
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - monitoring

  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime_kuma
    ports:
      - "${UPTIME_KUMA_PORT}:${UPTIME_KUMA_PORT}"
    env_file:
      - .env 
    volumes:
      - uptime-kuma-data:/app/data
    restart: unless-stopped
    networks:
      - monitoring

volumes:
  uptime-kuma-data:
  grafana-data:
  prometheus-data:

networks:
  app-network:
    driver: bridge
  monitoring:
    driver: bridge